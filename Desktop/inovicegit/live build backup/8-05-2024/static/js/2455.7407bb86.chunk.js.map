{"version":3,"file":"static/js/2455.7407bb86.chunk.js","mappings":"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","sources":["pages/prints/ExcelToJsonDownload.jsx"],"sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\nimport Loader from '../../components/Loader';\r\nimport { useEffect } from 'react';\r\nimport { ExportToExcel, NumberWithCommas, apiCall, fixedValues, isObjectEmpty } from '../../GlobalFunctions';\r\n\r\nconst ExcelToJsonDownload = ({ urls, token, invoiceNo, printName, evn, ApiVer }) => {\r\n\r\n    const [loader, setLoader] = useState(true);\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [isImageWorking, setIsImageWorking] = useState(true);\r\n  const handleImageErrors = () => {\r\n    setIsImageWorking(false);\r\n  };\r\n    const loadData = (data) => {\r\n        // console.log(data);\r\n        let json0Data = data?.BillPrint_Json[0];\r\n        let json1Data = data?.BillPrint_Json1;\r\n        let json2Data = data?.BillPrint_Json2;\r\n        let blankArr = [];\r\n        json1Data.forEach((e, i) => {\r\n            let obj = { ...e };\r\n            let materials = [];\r\n            json2Data.forEach((ele, ind) => {\r\n                if (ele?.StockBarcode === e?.SrJobno) {\r\n                    if (ele?.MasterManagement_DiamondStoneTypeid === 1) {\r\n                        let findIndexs = materials.findIndex((elem, index) => elem?.Rate === ele?.Rate && elem?.GroupName === ele?.GroupName &&\r\n                            elem?.MasterManagement_DiamondStoneTypeid === 1);\r\n                        if (findIndexs === -1) {\r\n                            materials.push(ele);\r\n                        } else {\r\n                            materials[findIndexs].Wt += ele?.Wt;\r\n                            materials[findIndexs].Amount += ele?.Amount;\r\n                            materials[findIndexs].Pcs += ele?.Pcs;\r\n                        }\r\n                    } else {\r\n                        let findIndex = materials.findIndex((elem, index) => elem?.Rate === ele?.Rate\r\n                            && elem?.MasterManagement_DiamondStoneTypeid === ele?.MasterManagement_DiamondStoneTypeid);\r\n                        if (findIndex === -1) {\r\n                            materials.push(ele);\r\n                        } else {\r\n                            materials[findIndex].Wt += ele?.Wt;\r\n                            materials[findIndex].Amount += ele?.Amount;\r\n                            materials[findIndex].Pcs += ele?.Pcs;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            let diamonds = materials.filter(ele => ele?.MasterManagement_DiamondStoneTypeid === 1);\r\n            let colorStones = materials.filter(ele => ele?.MasterManagement_DiamondStoneTypeid === 2);\r\n            let metals = materials.filter(ele => ele?.MasterManagement_DiamondStoneTypeid === 4);\r\n            let blankDiamonds = [];\r\n            let blankColorStones = [];\r\n            // console.log(diamonds);\r\n            diamonds.forEach((elem, ind) => {\r\n                let findRecord = blankDiamonds.findIndex((elee, indd) => elee?.ShapeName === elem?.ShapeName &&\r\n                    elee?.Colorname === elem?.Colorname && elee?.QualityName === elem?.QualityName && elee?.Rate === elem?.Rate);\r\n                if (findRecord === -1) {\r\n                    blankDiamonds.push(elem);\r\n                    // console.log(elem?.Pcs);\r\n                } else {\r\n                    // console.log(elem?.GroupName, \"sdfhdjf\");\r\n                    blankDiamonds[findRecord].SizeName += elem?.GroupName;\r\n                    blankDiamonds[findRecord].Wt += elem?.Wt;\r\n                    blankDiamonds[findRecord].Pcs += elem?.Pcs;\r\n                    blankDiamonds[findRecord].Amount += elem?.Amount;\r\n                }\r\n            });\r\n            // console.log(diamonds);\r\n            // console.log(blankDiamonds);\r\n            colorStones.forEach((ele, ind) => {\r\n                let findIndex = blankColorStones.findIndex((elem, index) => elem?.ShapeName === ele?.ShapeName &&\r\n                    elem?.QualityName === ele?.QualityName && elem?.Colorname === ele?.Colorname\r\n                    && elem?.Rate === ele?.Rate);\r\n                if (findIndex === -1) {\r\n                    blankColorStones.push(ele);\r\n                } else {\r\n                    blankColorStones[findIndex].SizeName = ele?.GroupName;\r\n                    blankColorStones[findIndex].Wt += ele?.Wt;\r\n                    blankColorStones[findIndex].Amount += ele?.Amount;\r\n                    blankColorStones[findIndex].Pcs += ele?.Pcs;\r\n                }\r\n            });\r\n\r\n            let arr = [blankDiamonds, blankColorStones, metals];\r\n            let largestLength = -1;\r\n\r\n            arr.forEach((ele, i) => {\r\n                if (ele.length > largestLength) {\r\n                    largestLength = ele.length;\r\n                }\r\n            });\r\n            if (materials.length > 0) {\r\n                Array.from({ length: largestLength }).forEach((ele, ind) => {\r\n                    let diamondQualityname = \"\";\r\n                    let diamondColorName = \"\";\r\n                    let diamondWt = \"\";\r\n                    let diamondRate = \"\";\r\n                    let diamondAmount = \"\";\r\n                    let diamondGroupname = \"\";\r\n                    let diamondShapename = \"\";\r\n                    let diamondPcs = \"\";\r\n                    if (blankDiamonds[ind]) {\r\n                        diamondQualityname = blankDiamonds[ind]?.QualityName;\r\n                        diamondColorName = blankDiamonds[ind]?.Colorname;\r\n                        diamondWt = NumberWithCommas(blankDiamonds[ind]?.Wt, 3);\r\n                        diamondRate = NumberWithCommas(blankDiamonds[ind]?.Rate, 2);\r\n                        diamondAmount = NumberWithCommas(blankDiamonds[ind]?.Amount / json0Data?.CurrencyExchRate, 2);\r\n                        diamondGroupname = blankDiamonds[ind]?.GroupName;\r\n                        diamondShapename = blankDiamonds[ind]?.ShapeName;\r\n                        diamondPcs = NumberWithCommas(blankDiamonds[ind]?.Pcs, 0);\r\n                    }\r\n                    let stoneShape = \"\";\r\n                    let stonePcs = \"\";\r\n                    let stoneWt = \"\";\r\n                    let stoneRate = \"\";\r\n                    let stoneAmount = \"\";\r\n                    let metalRate = \"\";\r\n                    let metalrateCopy = 0;\r\n\r\n                    if (colorStones[ind]) {\r\n                        stoneShape = colorStones[ind]?.ShapeName;\r\n                        stonePcs = NumberWithCommas(colorStones[ind]?.Pcs, 0);\r\n                        stoneWt = NumberWithCommas(colorStones[ind]?.Wt, 3);\r\n                        stoneRate = NumberWithCommas(colorStones[ind]?.Rate, 2);\r\n                        stoneAmount = NumberWithCommas(colorStones[ind]?.Amount / json0Data?.CurrencyExchRate, 2);\r\n                    }\r\n                    if (metals[ind]) {\r\n\r\n                        metalRate = NumberWithCommas(metals[ind]?.Rate, 2);\r\n                        metalrateCopy = +(fixedValues(metals[ind]?.Rate, 2));\r\n                    }\r\n                    let goldValue = ind === 0 ? NumberWithCommas((e?.MetalAmount - e?.LossAmt) / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    // let goldValue = ind === 0 ? NumberWithCommas((e?.NetWt*metalrateCopy) , 2) : \"\";\r\n                    if (goldValue === 0) {\r\n                        goldValue = \"\"\r\n                    }\r\n                    // console.log(e?.LossAmt ,  metalrateCopy,  json0Data?.CurrencyExchRate);\r\n                    let srJobno = ind === 0 ? e?.SrJobno : \"\";\r\n                    let designno = ind === 0 ? e?.designno : \"\";\r\n                    let companyFullName = ind === 0 ? json0Data?.CompanyFullName : \"\";\r\n                    let categoryname = ind === 0 ? e?.Categoryname : \"\";\r\n                    let otherAmtDetail = ind === 0 ? e?.OtherAmtDetail : \"\";\r\n                    let certification = ind === 0 ? `${NumberWithCommas(e?.OtherCharges / json0Data?.CurrencyExchRate, 2)}` : \"\";\r\n                    let certificateNo = ind === 0 ? e?.CertificateNo : \"\";\r\n                    // let lossAmt = ind === 0 ? NumberWithCommas((e?.LossAmt * metalrateCopy) / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    let lossAmt = ind === 0 ? NumberWithCommas((e?.LossWt * metalrateCopy) / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    // LossWt\r\n                    let LossWt = ind === 0 ? NumberWithCommas(e?.LossWt, 3) : \"\";\r\n                    let metalAmount = ind === 0 ? NumberWithCommas(e?.MetalAmount / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    let makingAmount = ind === 0 ? NumberWithCommas(e?.MakingAmount / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    let totalAmount = ind === 0 ? NumberWithCommas(e?.TotalAmount / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    let qty = ind === 0 ? 1 : \"\";\r\n                    let subCategory = ind === 0 ? \"OPEN SETTING\" : \"\";\r\n                    let rateType = ind === 0 ? \"GMS\" : \"\";\r\n                    let certifiedby = ind === 0 ? \"IGI\" : \"\";\r\n                    let diamondTotalAmount = ind === 0 ? NumberWithCommas(e?.DiamondAmount / json0Data?.CurrencyExchRate, 2) : \"\";\r\n                    let metalPurity = ind === 0 ? e?.MetalPurity : \"\";\r\n                    let metalColor = ind === 0 ? e?.MetalColor : \"\";\r\n                    let grosswt = ind === 0 ? NumberWithCommas(e?.grosswt, 3) : \"\";\r\n                    let NetWt = ind === 0 ? NumberWithCommas(e?.NetWt, 3) : \"\";\r\n\r\n                    let makeObj = createObj(srJobno, \"\", designno, companyFullName, \"\", qty, \"\", categoryname, subCategory, \"\", \"\", \"\",\r\n                        diamondQualityname, diamondColorName, diamondGroupname, \"\", diamondShapename, diamondPcs, diamondWt, diamondRate,\r\n                        diamondAmount, diamondTotalAmount, stoneShape, stonePcs, stoneWt, stoneRate, stoneAmount, \"\", grosswt, NetWt,\r\n                        LossWt, metalPurity, metalColor, rateType, metalRate, goldValue, lossAmt, metalAmount, makingAmount, totalAmount,\r\n                        \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", certification, certifiedby, certificateNo);\r\n                    blankArr.push(makeObj);\r\n                });\r\n            }\r\n        });\r\n        ExportToExcel(blankArr, data?.BillPrint_Json[0]?.InvoiceNo);\r\n    }\r\n\r\n    const createObj = (srJobno, discription, designno, CompanyFullName, Div, Qty, Type, Categoryname, SubCategory, Brand, Country, DiaDiv, diamondQualityname,\r\n        diamondColorName, diamondGroupname, Sieve, diamondShapename, diamondPcs, diamondWt, diamondRate, diamond_Amount, diamondAmount, stoneShape,\r\n        stonePcs, stoneWt, stoneRate, stoneAmount, MetalDivision, grosswt, NetWt, LossWt, metalPurity, metalColor, rateType, metalRate, goldValue,\r\n        LossAmt, MetalAmount, MakingAmount, TotalAmount, TagPrice1, TagPrice2, tagline1, tagline2, tagline3, tagline4, tagline5, costCode, certification, certifiedby,\r\n        CertificateNo) => {\r\n        let obj = {\r\n            \"Stock Code/Prefix\": srJobno,\r\n            \"Description\": discription,\r\n            \"Design No.\": designno,\r\n            \"Supplier Ref\": CompanyFullName,\r\n            \"Div\": Div,\r\n            \"Qty\": Qty,\r\n            \"Type\": Type,\r\n            \"Category\": Categoryname,\r\n            \"Sub Category\": SubCategory,\r\n            \"Brand\": Brand,\r\n            \"Country\": Country,\r\n            \"Dia Div\": DiaDiv,\r\n            \"Clarity\": diamondQualityname,\r\n            \"Dia Color\": diamondColorName,\r\n            \"Dia Size\": diamondGroupname,\r\n            \"Sieve\": Sieve,\r\n            \"Shape\": diamondShapename,\r\n            \"No. Of Dia\": diamondPcs,\r\n            \"Dia Carat\": diamondWt,\r\n            \"Dia Amt per ct\": diamondRate,\r\n            \"Dia value\": diamond_Amount,\r\n            \"total dia amount\": diamondAmount,\r\n            \"Stone Shape\": stoneShape,\r\n            \"No. Of St.\": stonePcs,\r\n            \"Stone Ct\": stoneWt,\r\n            \"St Amt per Ct\": stoneRate,\r\n            \"Stone Value\": stoneAmount,\r\n            \"Metal Division\": MetalDivision,\r\n            \"GROSS WT\": grosswt,\r\n            \"NET WT/GOLD WT\": NetWt,\r\n            \"gold loss wt\": LossWt,\r\n            \"Karat\": metalPurity,\r\n            \"Gold Colour\": metalColor,\r\n            \"Rate Type\": rateType,\r\n            \"Rate\": metalRate,\r\n            \"Gold Value\": goldValue,\r\n            \"Gold Loss Value\": LossAmt,\r\n            \"Total Gold Value\": MetalAmount,\r\n            \"MAKING\": MakingAmount,\r\n            \"Cost\": TotalAmount,\r\n            \"Tag Price 1\": TagPrice1,\r\n            \"Tag Price 2\": TagPrice2,\r\n            \"tagline1\": tagline1,\r\n            \"tagline2\": tagline2,\r\n            \"tagline3\": tagline3,\r\n            \"tagline4\": tagline4,\r\n            \"tagline5\": tagline5,\r\n            \"Cost Code\": costCode,\r\n            \"CERTIFICATION\": certification,\r\n            \"CERTIFIED BY\": certifiedby,\r\n            \"CERTIFICATE NUMBER\": CertificateNo\r\n        }\r\n        return obj;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const sendData = async () => {\r\n            try {\r\n                const data = await apiCall(token, invoiceNo, printName, urls, evn, ApiVer);\r\n                if (data?.Status === '200') {\r\n                    let isEmpty = isObjectEmpty(data?.Data);\r\n                    if (!isEmpty) {\r\n                        loadData(data?.Data);\r\n                        setLoader(false);\r\n                    } else {\r\n                        setLoader(false);\r\n                        setMsg(\"Data Not Found\");\r\n                    }\r\n                } else {\r\n                    setLoader(false);\r\n                    setMsg(data?.Message);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        sendData();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>{loader ? <Loader /> : msg === \"\" ?\r\n            \"\" : <p className='text-danger fs-2 fw-bold mt-5 text-center w-50 mx-auto'>{msg}</p>}</>\r\n    )\r\n}\r\n\r\nexport default ExcelToJsonDownload"],"names":["_ref","urls","token","invoiceNo","printName","evn","ApiVer","loader","setLoader","useState","msg","setMsg","isImageWorking","setIsImageWorking","createObj","srJobno","discription","designno","CompanyFullName","Div","Qty","Type","Categoryname","SubCategory","Brand","Country","DiaDiv","diamondQualityname","diamondColorName","diamondGroupname","Sieve","diamondShapename","diamondPcs","diamondWt","diamondRate","diamond_Amount","diamondAmount","stoneShape","stonePcs","stoneWt","stoneRate","stoneAmount","MetalDivision","grosswt","NetWt","LossWt","metalPurity","metalColor","rateType","metalRate","goldValue","LossAmt","MetalAmount","MakingAmount","TotalAmount","TagPrice1","TagPrice2","tagline1","tagline2","tagline3","tagline4","tagline5","costCode","certification","certifiedby","CertificateNo","useEffect","async","data","apiCall","Status","isObjectEmpty","Data","_data$BillPrint_Json$","json0Data","BillPrint_Json","json1Data","BillPrint_Json1","json2Data","BillPrint_Json2","blankArr","forEach","e","i","materials","ele","ind","StockBarcode","SrJobno","MasterManagement_DiamondStoneTypeid","findIndexs","findIndex","elem","index","Rate","GroupName","push","Wt","Amount","Pcs","diamonds","filter","colorStones","metals","blankDiamonds","blankColorStones","findRecord","elee","indd","ShapeName","Colorname","QualityName","SizeName","largestLength","length","Array","from","_blankDiamonds$ind","_blankDiamonds$ind2","_blankDiamonds$ind3","_blankDiamonds$ind4","_blankDiamonds$ind5","_blankDiamonds$ind6","_blankDiamonds$ind7","_blankDiamonds$ind8","NumberWithCommas","CurrencyExchRate","metalrateCopy","_colorStones$ind","_colorStones$ind2","_colorStones$ind3","_colorStones$ind4","_colorStones$ind5","_metals$ind","_metals$ind2","fixedValues","companyFullName","categoryname","OtherAmtDetail","concat","OtherCharges","certificateNo","lossAmt","metalAmount","makingAmount","totalAmount","qty","subCategory","diamondTotalAmount","DiamondAmount","MetalPurity","MetalColor","makeObj","ExportToExcel","InvoiceNo","loadData","Message","error","console","sendData","_jsx","_Fragment","children","Loader","className"],"sourceRoot":""}