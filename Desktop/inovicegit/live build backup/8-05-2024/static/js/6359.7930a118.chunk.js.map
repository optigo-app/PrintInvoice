{"version":3,"file":"static/js/6359.7930a118.chunk.js","mappings":"iPA4vCA,MAWA,EAX4BA,IAAyD,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,IAAvD,KAAEC,EAAI,MAAEC,EAAK,UAAEC,EAAS,UAAEC,EAAS,IAAEC,EAAG,OAAEC,GAAQZ,EAE7E,OACEa,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAC6C,UAA5B,QAATd,EAAAe,KAAKL,UAAI,IAAAV,GAAQ,QAARC,EAATD,EAAWgB,cAAM,IAAAf,OAAR,EAATA,EAAmBgB,iBAA4BC,EAAAA,EAAAA,KAACC,EAAAA,QAAuB,CAACb,KAAMA,EAAMC,MAAOA,EAAOC,UAAWA,EAAWC,UAAWA,EAAWC,IAAKA,EAAKC,OAAQA,IAC3H,WAA5B,QAATT,EAAAa,KAAKL,UAAI,IAAAR,GAAQ,QAARC,EAATD,EAAWc,cAAM,IAAAb,OAAR,EAATA,EAAmBc,iBAA6BC,EAAAA,EAAAA,KAACE,EAAAA,QAAwB,CAACd,KAAMA,EAAMC,MAAOA,EAAOC,UAAWA,EAAWC,UAAWA,EAAWC,IAAKA,EAAKC,OAAQA,IAC7H,UAA5B,QAATP,EAAAW,KAAKL,UAAI,IAAAN,GAAQ,QAARC,EAATD,EAAWY,cAAM,IAAAX,OAAR,EAATA,EAAmBY,iBAA4BC,EAAAA,EAAAA,KAACG,EAAAA,QAAuB,CAACf,KAAMA,EAAMC,MAAOA,EAAOC,UAAWA,EAAWC,UAAWA,EAAWC,IAAKA,EAAKC,OAAQA,MACrK,C","sources":["pages/prints/JewelleryTaxInvoice.jsx"],"sourcesContent":["//code of version 66 \r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  NumberWithCommas,\r\n  apiCall,\r\n  formatAmount,\r\n  handleImageError,\r\n  handlePrint,\r\n  isObjectEmpty,\r\n  taxGenrator,\r\n} from \"../../GlobalFunctions\";\r\nimport Loader from \"../../components/Loader\";\r\nimport style from \"../../assets/css/prints/jewelleryTaxInvoice.module.css\";\r\nimport style1 from \"../../assets/css/prints/jewelleryTaxInvoice.module.css\";\r\nimport style2 from \"../../assets/css/headers/header1.module.css\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { OrganizeDataPrint } from \"../../GlobalFunctions/OrganizeDataPrint\";\r\n\r\n// const JewelleryTaxInvoice = ({ urls, token, invoiceNo, printName, evn, ApiVer }) => {\r\n//   const [loader, setLoader] = useState(true);\r\n  \r\n//   const [result, setResult] = useState();\r\n//   const [data, setData] = useState([]);\r\n//   const [tax, settax] = useState([]);\r\n//   const [memo, setMemo] = useState(atob(evn)?.toLowerCase() === \"memo\" ? true : false);\r\n//   const [estimate, setEstimate] = useState(atob(evn)?.toLowerCase() === \"product estimate\" ? true : false);\r\n//   const [summary, setSummary] = useState([]);\r\n//   const [summary2, setSummary2] = useState([]);\r\n//   const [isImageWorking, setIsImageWorking] = useState(true);\r\n//   const [evName, setEvname] = useState(atob(evn)?.trim()?.toLowerCase() === 'quote' ? true : false);\r\n//   const handleImageErrors = () => {\r\n//     setIsImageWorking(false);\r\n//   };\r\n//   const [totalAmount, settotalAmount] = useState({\r\n//     before: 0,\r\n//     after: 0,\r\n//     grand: 0,\r\n//   });\r\n//   const [json0Data, setJson0Data] = useState({});\r\n//   const [customerDetail, setCustomerDetail] = useState({\r\n//     pan: \"\",\r\n//     gst: \"\",\r\n//   });\r\n\r\n//   const [msg, setMsg] = useState(\"\");\r\n\r\n\r\n//   const [evns, setEvns] = useState(atob(evn).toLowerCase());\r\n\r\n//   const loadData = (data) => {\r\n//     let json0Datas = data.BillPrint_Json[0];\r\n//     let custDetail = { ...customerDetail };\r\n//     if (data.BillPrint_Json[0]?.vat_cst_pan !== \"\") {\r\n//       let custpanGstArr = data.BillPrint_Json[0]?.vat_cst_pan.split(\"|\");\r\n//       let custpans = custpanGstArr[1] ? custpanGstArr[1].split(\"-\") : \"\";\r\n//       let custGst = custpanGstArr[0] ? custpanGstArr[0].split(\"-\") : \"\";\r\n//       custDetail.pan = custpans[1] ? custpans[1] : \"\";\r\n//       custDetail.gst = custGst[1] ? custGst[1] : \"\";\r\n//       setCustomerDetail(custDetail);\r\n//     }\r\n//     setJson0Data(json0Datas);\r\n//     let resultArr = [];\r\n//     let totalAmountBefore = 0;\r\n//     let metalArr = [];\r\n//     let diamondWt = 0;\r\n//     let colorStoneWt = 0;\r\n//     let miscWt = 0;\r\n//     let grossWt = 0;\r\n//     data?.BillPrint_Json1.forEach((e, i) => {\r\n//       let findRecord = metalArr.findIndex(\r\n//         (elem) => elem?.label === e?.MetalTypePurity\r\n//       );\r\n//       if (findRecord === -1) {\r\n//         metalArr.push({ label: e?.MetalTypePurity, value: (e?.NetWt * e?.Quantity), gm: true });\r\n//       } else {\r\n//         metalArr[findRecord].value += (e?.NetWt * e?.Quantity);\r\n//       }\r\n//       grossWt += (e?.grosswt * e?.Quantity);\r\n//       let diamondWts = 0;\r\n//       let colorStoneWts = 0;\r\n//       let miscWts = 0;\r\n//       let obj = { ...e };\r\n//       let miscWt = 0;\r\n//       let materials = [];\r\n//       totalAmountBefore +=\r\n//         e?.TotalAmount / data?.BillPrint_Json[0].CurrencyExchRate;\r\n//       let metalColorCode = \"\";\r\n//       data?.BillPrint_Json2.forEach((ele, ind) => {\r\n//         if (obj?.SrJobno === ele?.StockBarcode) {\r\n//           // if ((ele?.MasterManagement_DiamondStoneTypeid === 1 || ele?.MasterManagement_DiamondStoneTypeid === 2 || ele?.MasterManagement_DiamondStoneTypeid === 3) && ele?.IsHSCOE === 0) {\r\n//           if (\r\n//             (ele?.MasterManagement_DiamondStoneTypeid === 1 ||\r\n//               ele?.MasterManagement_DiamondStoneTypeid === 2 ||\r\n//               ele?.MasterManagement_DiamondStoneTypeid === 3) &&\r\n//             ele?.IsHSCOE === 0\r\n//           ) {\r\n//             let findRecord = materials.findIndex(\r\n//               (elem) =>\r\n//                 elem?.MasterManagement_DiamondStoneTypeid ===\r\n//                 ele?.MasterManagement_DiamondStoneTypeid &&\r\n//                 elem?.ShapeName === ele?.ShapeName &&\r\n//                 elem?.Colorname === ele?.Colorname &&\r\n//                 elem?.QualityName === ele?.QualityName &&\r\n//                 elem?.Rate === ele?.Rate\r\n//             );\r\n//             if (findRecord === -1) {\r\n//               materials.push(ele);\r\n//             } else {\r\n//               materials[findRecord].Pcs += ele?.Pcs;\r\n//               materials[findRecord].Wt += ele?.Wt;\r\n//               materials[findRecord].Amount += ele?.Amount;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 1) {\r\n//               diamondWt += (ele?.Wt * obj?.Quantity) ;\r\n//               diamondWts += ele?.Wt;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 2) {\r\n//               colorStoneWt += (ele?.Wt * obj?.Quantity);\r\n//               colorStoneWts += ele?.Wt;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 3) {\r\n//               miscWt += (ele?.Wt );\r\n//               miscWts += ele?.Wt;\r\n//             }\r\n//           } else if (ele?.MasterManagement_DiamondStoneTypeid === 4) {\r\n//             if (ele?.IsPrimaryMetal === 1) {\r\n//               metalColorCode = ele?.MetalColorCode;\r\n//             } else if (metalColorCode === \"\") {\r\n//               metalColorCode = ele?.MetalColorCode;\r\n//             }\r\n//           }\r\n//         }\r\n//       });\r\n        \r\n//       obj.TotalAmount =\r\n//         obj.TotalAmount / data?.BillPrint_Json[0].CurrencyExchRate;\r\n//       obj.diamondWts = diamondWts;\r\n//       obj.colorStoneWts = colorStoneWts;\r\n//       obj.miscWts = miscWts;\r\n//       obj.materials = materials;\r\n//       obj.metalColorCode = metalColorCode;\r\n      \r\n//       obj.miscWt = (miscWt * obj?.Quantity);\r\n//       resultArr.push(obj);\r\n//     });\r\n//     // let miscQunWt = 0;\r\n//     // metalArr?.forEach((a) => {\r\n//     //   return  miscQunWt += a?.miscWt;\r\n//     // })\r\n//     metalArr.push({ label: \"Diamond Wt\", value: (diamondWt), gm: false });\r\n//     metalArr.push({ label: \"Stone Wt\", value: colorStoneWt, gm: false });\r\n  \r\n//     if (!estimate) {\r\n//       // metalArr.push({ label: \"Gross Wt\", value: grossWt, gm: true });\r\n//     }\r\n\r\n\r\n//     let miscQunWt = 0;\r\n//     resultArr?.forEach((a) => {\r\n//       return  miscQunWt += a?.miscWt;\r\n//     })\r\n\r\n//     if(evName){\r\n//       metalArr.push({label: \"Misc Wt\", value: miscQunWt, gm: true});\r\n//       // metalArr.push({label: \"Gross Wt\", value: grossWt, gm: true});\r\n//     }\r\n\r\n//     if(evName){\r\n//       // metalArr.push({label: \"Misc Wt\", value: miscWt, gm: true});\r\n//       metalArr.push({label: \"Gross Wt\", value: grossWt, gm: true});\r\n//     }\r\n//     setSummary(metalArr);\r\n//     let taxValue = taxGenrator(json0Datas, totalAmountBefore);\r\n//     let afterTotal =\r\n//       taxValue.reduce((accumulator, currentValue) => {\r\n//         return accumulator + +currentValue.amount;\r\n//       }, 0) + totalAmountBefore;\r\n//     let grandTotal = afterTotal + json0Datas.AddLess;\r\n//     let totalAmounts = {\r\n//       before: totalAmountBefore,\r\n//       after: afterTotal,\r\n//       grand: grandTotal,\r\n//     };\r\n//     resultArr.sort((a, b) => {\r\n//       const designNoA = parseInt((a?.designno)?.match(/\\d+/)[0]);\r\n//       const designNoB = parseInt((b?.designno)?.match(/\\d+/)[0]);\r\n//       return designNoA - designNoB;\r\n//   });\r\n  \r\n//     settotalAmount(totalAmounts);\r\n//     settax(taxValue);\r\n//     setData(resultArr);\r\n//   };\r\n//   const loadData2 = (data) => {\r\n//     const copydata = cloneDeep(data);\r\n\r\n//     let address = copydata?.BillPrint_Json[0]?.Printlable?.split(\"\\r\\n\");\r\n//     copydata.BillPrint_Json[0].address = address;\r\n//     const datas = OrganizeDataPrint(\r\n//       copydata?.BillPrint_Json[0],\r\n//       copydata?.BillPrint_Json1,\r\n//       copydata?.BillPrint_Json2\r\n//     );\r\n\r\n//     setResult(datas)\r\n\r\n//     let metwise = [];\r\n\r\n//     // datas?.resultArray?.forEach((a) => {\r\n//     //   let findrec =  metwise.findIndex((elem) => elem?.label === a?.MetalTypePurity);\r\n//     //   if(findrec === -1){\r\n//     //     let obj = {...a}\r\n//     //     obj.netwt_ = (a?.NetWt * a?.Quantity);\r\n//     //     obj.dwt = a?.totals?.diamonds?.Wt;\r\n//     //     obj.cswt = a?.totals?.colorstone?.Wt;\r\n//     //     metwise.push(obj);\r\n//     //   }else{\r\n//     //     metwise[findrec].netwt_ += (a?.NetWt * a?.Quantity)\r\n//     //     metwise[findrec].dwt += (a?.dwt * a?.Quantity)\r\n//     //     metwise[findrec].cswt += (a?.cswt * a?.Quantity)\r\n//     //   }\r\n//     // })\r\n//     // let diaclr = [];\r\n//     // datas?.resultArray?.forEach((el) => {\r\n//     //     let obj = {...el};\r\n//     //     obj.dia_wt_quantity = (el?.Quantity * el?.totals?.diamonds?.Wt);\r\n//     //     obj.cls_wt_quantity = (el?.Quantity * el?.totals?.colorstone?.Wt);\r\n//     // })\r\n\r\n//     // setSummary2(metwise);\r\n\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     const sendData = async () => {\r\n//       try {\r\n//         const data = await apiCall(token, invoiceNo, printName, urls, evn, ApiVer);\r\n//         if (data?.Status === \"200\") {\r\n//           let isEmpty = isObjectEmpty(data?.Data);\r\n//           if (!isEmpty) {\r\n//             loadData(data?.Data);\r\n//             loadData2(data?.Data)\r\n//             setLoader(false);\r\n//           } else {\r\n//             setLoader(false);\r\n//             setMsg(\"Data Not Found\");\r\n//           }\r\n//         } else {\r\n//           setLoader(false);\r\n//           setMsg(data?.Message);\r\n//         }\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//       }\r\n//     };\r\n//     sendData();\r\n//   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n//   }, []);\r\n  \r\n//   return loader ? (\r\n//     <Loader />\r\n//   ) : msg === \"\" ? (\r\n//     <>\r\n//       <div className={`container max_width_container pad_60_allPrint ${style?.containerJewellery} jewelleryinvoiceContain`} >\r\n//         {/* buttons */}\r\n//         <div className={`d-flex justify-content-end align-items-center ${style?.print_sec_sum4} mb-4`} >\r\n//           <div className=\"form-check ps-3 mt-4\">\r\n//             <input\r\n//               type=\"button\"\r\n//               className=\"btn_white blue py-1\"\r\n//               value=\"Print\"\r\n//               onClick={(e) => handlePrint(e)}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         { json0Data?.PrintHeadLabel !== '' && <div className={`${style?.headLabelJTI_quote}`}>{json0Data?.PrintHeadLabel}</div>}\r\n//         {/* header */}\r\n//         {json0Data?.IsBranchWiseAddress === 1 ? (\r\n//           <div className=\"d-flex justify-content-between p-2\">\r\n//             <div>\r\n//               <div\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Branch_Address }}\r\n//               ></div>\r\n//             </div>\r\n//             <div>\r\n              \r\n//             {isImageWorking && (json0Data?.PrintLogo !== \"\" && \r\n//                       <img src={json0Data?.PrintLogo} alt=\"\" \r\n//                       className='w-25 h-auto ms-auto d-block object-fit-contain' \r\n//                       onError={handleImageErrors} height={120} width={150} />)}\r\n//               {/* <img\r\n//                 src={json0Data?.PrintLogo}\r\n//                 alt=\"\"\r\n//                 className={`${style?.image}`}\r\n//               /> */}\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <div className={`${style2.companyDetails}`}>\r\n//             <div className={`${style2.companyhead} p-2`}>\r\n//               <p className={`${style2.lines} fw-bold px-1`} style21={{ fontWeight: \"bold\" }}>\r\n//                 {json0Data?.CompanyFullName}\r\n//               </p>\r\n\r\n    \r\n//               <p className={style2.lines}>{json0Data?.CompanyAddress}</p>\r\n//               <p className={style2.lines}>{json0Data?.CompanyAddress2}</p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.CompanyCity}-{json0Data?.CompanyPinCode},\r\n//                 {json0Data?.CompanyState}({json0Data?.CompanyCountry})\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 Tell No: {json0Data?.CompanyTellNo}\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.CompanyEmail} | {json0Data?.CompanyWebsite}\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.Company_VAT_GST_No} | {json0Data?.Company_CST_STATE}\r\n//                 -{json0Data?.Company_CST_STATE_No} | PAN-{json0Data?.Pannumber}\r\n//               </p>\r\n//             </div>\r\n//             <div\r\n//               style={{ width: \"30%\" }}\r\n//               className=\"d-flex justify-content-end align-item-center h-100\"\r\n//             >\r\n//               {/* <img\r\n//                 src={json0Data?.PrintLogo}\r\n//                 alt=\"\"\r\n//                 className={style2.headerImg}\r\n//               /> */}\r\n//                 {isImageWorking && (json0Data?.PrintLogo !== \"\" && \r\n//                       <img src={json0Data?.PrintLogo} alt=\"\" \r\n//                       className='w-100 h-auto ms-auto d-block object-fit-contain'\r\n//                       style={{maxWidth:'116px'}}\r\n//                       onError={handleImageErrors} height={120} width={150} />)}\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//         {/* sub header */}\r\n//         <div className=\"mt-2 no_break\">\r\n//           <div className=\"border d-flex justify-content-between\">\r\n//             <div className=\"col-6 p-2\">\r\n//               <p className=\"lh-1 pb-1\">To, </p>\r\n//               {json0Data?.customerfirmname !== \"\" && (\r\n//                 <p className=\"fw-bold lh-1 pb-1\">\r\n//                   {json0Data?.customerfirmname}\r\n//                 </p>\r\n//               )}\r\n//               {json0Data?.customerstreet !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customerstreet}</p>\r\n//               )}\r\n//               {json0Data?.customerregion !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customerregion}</p>\r\n//               )}\r\n//               {json0Data?.customercity !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customercity}</p>\r\n//               )}\r\n//               <p className=\"lh-1 pb-1\">\r\n//                 {json0Data?.customerstate}, {json0Data?.customercountry}{\" \"}\r\n//                 {json0Data?.customerpincode}\r\n//               </p>\r\n//               {json0Data?.customermobileno !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">Tel : {json0Data?.customermobileno}</p>\r\n//               )}\r\n//               <p className=\"lh-1 pb-1\">{json0Data?.customeremail1}</p>\r\n//             </div>\r\n//             <div className=\"col-5 px-2 py-3\">\r\n//               <p className=\"lh-1 pb-1\">\r\n//                 {evns === \"memo\" && \"Memo \"} Invoice\r\n//                 <span className=\"fw-bold\">#: {json0Data?.InvoiceNo}</span> Dated{\" \"}\r\n//                 <span className=\"fw-bold\">{json0Data?.EntryDate}</span>\r\n//               </p>\r\n//               {customerDetail?.pan !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   PAN<span className=\"fw-bold\">#: {customerDetail?.pan}</span>{\" \"}\r\n//                 </p>\r\n//               )}\r\n//               {/* {customerDetail?.gst !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   GSTIN <span className=\"fw-bold\">{customerDetail?.gst} </span>\r\n//                   {json0Data?.Cust_CST_STATE !== \"\" &&\r\n//                     json0Data?.Cust_CST_STATE_No !== \"\" && (\r\n//                       <>\r\n//                         | {json0Data?.Cust_CST_STATE}{\" \"}\r\n//                         <span className=\"fw-bold\">\r\n//                           {json0Data?.Cust_CST_STATE_No}\r\n//                         </span>\r\n//                       </>\r\n//                     )}{\" \"}\r\n//                 </p>\r\n//               )} */}\r\n//               <div>\r\n//                 GSTIN : <span className=\"fw-bold\">{result?.header?.CustGstNo}</span> | { result?.header?.Cust_CST_STATE } <span className=\"fw-bold\"> { result?.header?.Cust_CST_STATE_No }</span>\r\n//               </div>\r\n//               {/* {(evns !== \"memo\" || evns === 'quote' ) && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   Due Date:{\" \"}\r\n//                   <span className=\"fw-bold\">{json0Data?.DueDate}</span>\r\n//                 </p>\r\n//               )} */}\r\n//               {\r\n//                 ((evns === 'quote') || (evns === 'memo')) ? '' : <p className=\"lh-1 pb-1\">\r\n//                 Due Date:{\" \"}\r\n//                 <span className=\"fw-bold\">{json0Data?.DueDate}</span>\r\n//               </p>\r\n//               }\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         {/* table header */}\r\n//         <div className=\"d-flex border lightGrey no_break\">\r\n//           <div className=\"col-1 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">SR NO</p>\r\n//           </div>\r\n//           <div className={`col-2 border-end`}>\r\n//             <p className=\"fw-bold text-center\">ITEM CODE</p>\r\n//           </div>\r\n//           <div className={`${evName ? 'col-4' : 'col-5'} p-1 border-end`}>\r\n//             <p className=\"fw-bold text-center\">DESCRIPTION</p>\r\n//           </div>\r\n//           <div className={` ${evName ? 'col-1' : 'col-2'} p-1 border-end  `}>\r\n//             <p className=\"fw-bold text-center\">IMAGE</p>\r\n//           </div>\r\n//           {\r\n//             evName && <div className=\"col-2 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">UNIT PRICE</p>\r\n//           </div>\r\n//           }\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"fw-bold text-center\">\r\n//               AMOUNT ({json0Data?.CurrencyCode})\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* table data */}\r\n//         {data.length > 0 &&\r\n//           data.map((e, i) => {\r\n//             return (\r\n//               <div className=\"d-flex border-start border-end border-bottom no_break\" key={i} >\r\n//                 <div className=\"col-1 p-1 border-end\">\r\n//                   <p className=\"text-center\">{i + 1}</p>\r\n//                 </div>\r\n//                 <div className={`col-2 p-1 border-end position-relative`}>\r\n//                   { evName ? '' : <p>Job: {e?.SrJobno} </p>}\r\n//                   <p>\r\n//                     Design: <span className=\"fw-bold\">{e?.designno}</span>{\" \"}\r\n//                   </p>\r\n//                   { e?.Size === '' || e?.Size === '-' ? '' : <p className=\"fw-bold\">{e?.Size}</p>}\r\n//                   <div className=\"text-center w-100 \" style={{position: 'absolute', top:'50%' }}><span><span className=\"fw-normal\">QTY :</span> </span><span className=\"fw-bold\">{e?.Quantity}</span></div>\r\n//                 </div>\r\n//                 <div className={`${evName ? 'col-4' : 'col-5'} p-1 border-end`}>\r\n//                   <p className=\"text-break\">\r\n//                     {e?.MetalTypePurity} {e?.MetalColor} |{\" \"}\r\n//                     {NumberWithCommas(e?.grosswt, 3)} gms GW |{\" \"}\r\n//                     {NumberWithCommas(e?.NetWt, 3)} gms NW\r\n//                     {e?.diamondWts !== 0 && (\r\n//                       <> | {(memo || evName) && \"Dia: \"} {NumberWithCommas(e?.diamondWts, 3)} Cts</>\r\n//                     )}\r\n//                     {e?.colorStoneWts !== 0 && (\r\n//                       <> | {(memo || evName) && \"CS: \"} {NumberWithCommas(e?.colorStoneWts, 3)} Cts</>\r\n//                     )}\r\n//                     {e?.miscWts !== 0 && (\r\n//                       <> | {(memo || evName) && \"MISC: \"} {NumberWithCommas(e?.miscWts, 3)} gms</>\r\n//                     )}\r\n//                   </p>\r\n                  \r\n//                   {e.materials.length > 0 &&\r\n//                     e.materials.map((ele, ind) => {\r\n//                       return (\r\n//                         <p key={ind} className=\"text-break\">\r\n//                           {/* {ele?.IsCenterStone === 1 ? ( */}\r\n//                             {/* // \"Center stone\" */}\r\n//                           {/* // ) : ( */}\r\n//                             <span className=\"text-break\">\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 1 &&\r\n//                                 \"Diamond\"}\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 2 &&\r\n//                                 \"Colorstone\"}\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 3 &&\r\n//                                 \"Misc\"}\r\n//                             </span>\r\n//                           {/* )} */}\r\n//                           : {NumberWithCommas(ele?.Pcs, 0)} Pcs | {NumberWithCommas(ele?.Wt, 3)} \r\n//                           {ele?.MasterManagement_DiamondStoneTypeid === 3 ? \"gms\" : \"Cts\"} | \r\n//                          {evName ? (ele?.MaterialTypeName ? `${ele?.MaterialTypeName} ` : \"\") : \"\"} {ele?.ShapeName}{ele?.MasterManagement_DiamondStoneTypeid !== 3 && <span className=\"text-break\"> \r\n//                           {\" \"} {ele?.Colorname} {ele?.QualityName}</span>}\r\n//                         </p>\r\n//                       );\r\n//                     })}\r\n//                     {e?.JobRemark !== \"\" && (\r\n//                     <div>\r\n//                       <p className=\"text-decoration-underline fw-bold\">\r\n//                         REMARKS{\" \"}\r\n//                       </p>\r\n//                       <p>{e?.JobRemark}</p>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className={`${ evName ? 'col-1' : 'col-2' } p-1 border-end d-flex justify-content-center align-items-center`}>\r\n//                   <img\r\n//                     src={e?.DesignImage}\r\n//                     alt=\"\"\r\n//                     className={`d-block mx-auto ${style?.image} w-100`}\r\n//                     onError={handleImageError}\r\n//                   />\r\n//                 </div>\r\n//               {\r\n//                  evName &&   <div className=\"col-2 p-1 border-end\">\r\n//                  <p className=\"text-end\">\r\n//                    <span className=\"pe-1\"\r\n//                      dangerouslySetInnerHTML={{\r\n//                        __html: json0Data?.Currencysymbol,\r\n//                      }}\r\n//                    ></span>\r\n//                    {NumberWithCommas((e?.TotalAmount / e?.Quantity), 2)}{\" \"}\r\n//                  </p>\r\n//                </div>\r\n//               }\r\n//                 <div className=\"col-2 p-1\">\r\n//                   <p className=\"text-end\">\r\n//                     <span\r\n//                       dangerouslySetInnerHTML={{\r\n//                         __html: json0Data?.Currencysymbol,\r\n//                       }}\r\n//                     ></span>\r\n//                     {NumberWithCommas(e?.TotalAmount, 2)}{\" \"}\r\n//                   </p>\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//           })}\r\n//         {/* total */}\r\n//         <div className=\"d-flex border-start border-end border-bottom no_break lightGrey\">\r\n//           <div className=\"col-1 p-1 border-end\">\r\n//             <p className=\"text-center\"></p>\r\n//           </div>\r\n//           <div className={`${ evName ? 'col-7' : 'col-9' } p-1 border-end`}>\r\n//             <p className=\"fw-bold\">Total</p>{\" \"}\r\n//           </div>\r\n//          {\r\n//           evName &&  <div className=\"col-2 p-1\">\r\n//           <p className=\"text-end fw-bold\">\r\n//             <span className=\"pe-1\" dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }} ></span>\r\n//             {/* {formatAmount((result?.mainTotal?.total_amount / result?.mainTotal?.total_Quantity))} */}\r\n//             {/* {formatAmount(((result?.mainTotal?.total_amount / result?.mainTotal?.total_Quantity)))} */}\r\n//             {NumberWithCommas(totalAmount.before, 2)}{\" \"}\r\n//           </p>\r\n//         </div>\r\n//          }\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(totalAmount.before, 2)}{\" \"}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* Remakrs */}\r\n//         <div className=\"d-flex border-start border-end border-bottom no_break\">\r\n//           <div className=\"col-4 p-1 border-end\">\r\n//             <p className=\"fw-bold text-decoration-underline\"> REMARKS</p>\r\n//             <div\r\n//               dangerouslySetInnerHTML={{ __html: json0Data?.PrintRemark }}\r\n//             ></div>\r\n//           </div>\r\n//           <div className=\"col-4 p-1 border-end\">\r\n//             { evName !== 'quote' && summary.map((e, i) => {\r\n//               return (\r\n//                 <div className=\"d-flex justify-content-between\" key={i}>\r\n//                   <p key={i}>{e?.label}: </p>\r\n//                   <p>\r\n//                     {NumberWithCommas(e?.value, 3)} {e?.gm ? \"gm\" : \"cts\"}\r\n//                   </p>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//             {/* {\r\n//               evName === 'quote' && summary2?.map((e, i) => {\r\n//                 return <div>\r\n//                   <div>{}</div>\r\n//                 </div>\r\n//               })\r\n//             } */}\r\n//           </div>\r\n//           <div className=\"col-2 p-1 border-end\">\r\n//             {tax.map((e, i) => {\r\n//               return (\r\n//                 <p key={i}>\r\n//                   {e?.name} @ {e?.per}\r\n//                 </p>\r\n//               );\r\n//             })}\r\n//             <p>Total</p>\r\n//             {json0Data?.AddLess > 0 ? <p>Add</p> : <p>Less</p>}\r\n//           </div>\r\n//           <div className=\"col-2 p-1\">\r\n//             {tax?.map((e, i) => {\r\n//               return (\r\n//                 <p className=\"text-end fw-bold\" key={i}>\r\n//                   <span\r\n//                     dangerouslySetInnerHTML={{\r\n//                       __html: json0Data?.Currencysymbol,\r\n//                     }}\r\n//                   ></span>\r\n//                   {NumberWithCommas((+e?.amount / result?.header?.CurrencyExchRate), 2)}{\" \"}\r\n//                 </p>\r\n//               );\r\n//             })}\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {/* {NumberWithCommas(totalAmount.after, 2)}{\" \"} */}\r\n//               {formatAmount(((result?.mainTotal?.total_amount / result?.header?.CurrencyExchRate) + (result?.allTaxesTotal)))}\r\n//             </p>\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(json0Data?.AddLess, 2)}{\" \"}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* gran total */}\r\n//         <div className=\"d-flex border-start border-end border-bottom no_break lightGrey\">\r\n//           <div className=\"col-8 p-1\"></div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"fw-bold\">GRAND TOTAL</p>{\" \"}\r\n//           </div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {/* {NumberWithCommas(totalAmount.grand, 2)}{\" \"} */}\r\n//               {formatAmount(((result?.mainTotal?.total_amount / result?.header?.CurrencyExchRate) + (result?.allTaxesTotal) + result?.header?.AddLess))}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* computer generated */}\r\n//         <p className={`py-2 ${style.generated} no_break text-secondary`}>\r\n//           ** THIS IS A COMPUTER GENERATED INVOICE AND KINDLY NOTIFY US\r\n//           IMMEDIATELY IN CASE YOU FIND ANY DISCREPANCY IN THE DETAILS OF\r\n//           TRANSACTIONS{\" \"}\r\n//         </p>\r\n//         {/* remark */}\r\n//         <div className=\"border px-2 no_break\">\r\n//           <div\r\n//             dangerouslySetInnerHTML={{ __html: json0Data?.Declaration }}\r\n//           ></div>\r\n//         </div>\r\n//         {/* bank detail */}\r\n//         <div className=\"border-start border-end border-bottom d-flex no_break\">\r\n//           <div className=\"col-6 border-end p-2\">\r\n//             <p className=\"fw-bold\">Bank Detail</p>\r\n//             <p>Bank Name: {json0Data?.bankname}</p>\r\n//             <p className=\"text-break\">Branch: {json0Data?.bankaddress}</p>\r\n//             <p>Account Name: {json0Data?.accountname}</p>\r\n//             <p>Account No. : {json0Data?.accountnumber}</p>\r\n//             <p>RTGS/NEFT IFSC: {json0Data?.rtgs_neft_ifsc}</p>\r\n//           </div>\r\n//           <div className=\"col-3 border-end d-flex flex-column justify-content-between p-2\">\r\n//             <p>Signature</p>\r\n//             <p className=\"fw-bold\">{json0Data?.customerfirmname}</p>\r\n//           </div>\r\n//           <div className=\"col-3 d-flex flex-column justify-content-between p-2\">\r\n//             <p>Signature</p>\r\n//             <p className=\"fw-bold\">{json0Data?.CompanyFullName}</p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   ) : (\r\n//     <p className=\"text-danger fs-2 fw-bold mt-5 text-center w-50 mx-auto\">\r\n//       {msg}\r\n//     </p>\r\n//   );\r\n// };\r\n\r\n// export default JewelleryTaxInvoice;\r\n\r\n\r\n\r\n//runnning of version 67\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   NumberWithCommas,\r\n//   apiCall,\r\n//   handleImageError,\r\n//   handlePrint,\r\n//   isObjectEmpty,\r\n//   taxGenrator,\r\n// } from \"../../GlobalFunctions\";\r\n// import Loader from \"../../components/Loader\";\r\n// import style from \"../../assets/css/prints/jewelleryTaxInvoice.module.css\";\r\n// import style2 from \"../../assets/css/headers/header1.module.css\";\r\n// import JewelleryTaxInvoiceSale from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceSale';\r\n// import JewelleryTaxInvoiceQuote from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceQuote';\r\n// import JewelleryTaxInvoiceMemo from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceMemo';\r\nimport JewelleryTaxInvoiceSale from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceSale';\r\nimport JewelleryTaxInvoiceQuote from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceQuote';\r\nimport JewelleryTaxInvoiceMemo from './JewelleryTaxInvoiceEventWise/JewelleryTaxInvoiceMemo';\r\n\r\n// const JewelleryTaxInvoice = ({ urls, token, invoiceNo, printName, evn, ApiVer }) => {\r\n//   const [loader, setLoader] = useState(true);\r\n//   const [data, setData] = useState([]);\r\n//   const [tax, settax] = useState([]);\r\n//   const [memo, setMemo] = useState(atob(evn)?.toLowerCase() === \"memo\" ? true : false);\r\n//   const [estimate, setEstimate] = useState(atob(evn)?.toLowerCase() === \"product estimate\" ? true : false);\r\n//   const [summary, setSummary] = useState([]);\r\n//   const [isImageWorking, setIsImageWorking] = useState(true);\r\n//   const handleImageErrors = () => {\r\n//     setIsImageWorking(false);\r\n//   };\r\n//   const [totalAmount, settotalAmount] = useState({\r\n//     before: 0,\r\n//     after: 0,\r\n//     grand: 0,\r\n//   });\r\n//   const [json0Data, setJson0Data] = useState({});\r\n//   const [customerDetail, setCustomerDetail] = useState({\r\n//     pan: \"\",\r\n//     gst: \"\",\r\n//   });\r\n\r\n//   const [msg, setMsg] = useState(\"\");\r\n\r\n\r\n//   const [evns, setEvns] = useState(atob(evn).toLowerCase());\r\n\r\n//   const loadData = (data) => {\r\n//     let json0Datas = data.BillPrint_Json[0];\r\n//     let custDetail = { ...customerDetail };\r\n//     if (data.BillPrint_Json[0]?.vat_cst_pan !== \"\") {\r\n//       let custpanGstArr = data.BillPrint_Json[0]?.vat_cst_pan.split(\"|\");\r\n//       let custpans = custpanGstArr[1] ? custpanGstArr[1].split(\"-\") : \"\";\r\n//       let custGst = custpanGstArr[0] ? custpanGstArr[0].split(\"-\") : \"\";\r\n//       custDetail.pan = custpans[1] ? custpans[1] : \"\";\r\n//       custDetail.gst = custGst[1] ? custGst[1] : \"\";\r\n//       setCustomerDetail(custDetail);\r\n//     }\r\n//     setJson0Data(json0Datas);\r\n//     let resultArr = [];\r\n//     let totalAmountBefore = 0;\r\n//     let metalArr = [];\r\n//     let diamondWt = 0;\r\n//     let colorStoneWt = 0;\r\n//     let miscWt = 0;\r\n//     let grossWts = 0;\r\n//     data?.BillPrint_Json1.forEach((e, i) => {\r\n//       let findRecord = metalArr.findIndex(\r\n//         (elem) => elem?.label === e?.MetalTypePurity\r\n//       );\r\n//       if (findRecord === -1) {\r\n//         metalArr.push({ label: e?.MetalTypePurity, value: e?.NetWt, gm: true });\r\n//       } else {\r\n//         metalArr[findRecord].value += e?.NetWt;\r\n//       }\r\n//       grossWts += e?.grosswt;\r\n//       let diamondWts = 0;\r\n//       let colorStoneWts = 0;\r\n//       let miscWts = 0;\r\n//       let obj = { ...e };\r\n//       let miscWt = 0;\r\n//       let materials = [];\r\n//       totalAmountBefore +=\r\n//         e?.TotalAmount / data?.BillPrint_Json[0].CurrencyExchRate;\r\n//       let metalColorCode = \"\";\r\n//       data?.BillPrint_Json2.forEach((ele, ind) => {\r\n//         if (obj?.SrJobno === ele?.StockBarcode) {\r\n//           // if ((ele?.MasterManagement_DiamondStoneTypeid === 1 || ele?.MasterManagement_DiamondStoneTypeid === 2 || ele?.MasterManagement_DiamondStoneTypeid === 3) && ele?.IsHSCOE === 0) {\r\n//           if (\r\n//             (ele?.MasterManagement_DiamondStoneTypeid === 1 ||\r\n//               ele?.MasterManagement_DiamondStoneTypeid === 2 ||\r\n//               ele?.MasterManagement_DiamondStoneTypeid === 3) &&\r\n//             ele?.IsHSCOE === 0\r\n//           ) {\r\n//             let findRecord = materials.findIndex(\r\n//               (elem) =>\r\n//                 elem?.MasterManagement_DiamondStoneTypeid ===\r\n//                 ele?.MasterManagement_DiamondStoneTypeid &&\r\n//                 elem?.ShapeName === ele?.ShapeName &&\r\n//                 elem?.Colorname === ele?.Colorname &&\r\n//                 elem?.QualityName === ele?.QualityName\r\n//               // && elem?.Rate === ele?.Rate\r\n//             );\r\n//             if (findRecord === -1) {\r\n//               materials.push(ele);\r\n//             } else {\r\n//               materials[findRecord].Pcs += ele?.Pcs;\r\n//               materials[findRecord].Wt += ele?.Wt;\r\n//               materials[findRecord].Amount += ele?.Amount;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 1) {\r\n//               diamondWt += ele?.Wt;\r\n//               diamondWts += ele?.Wt;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 2) {\r\n//               colorStoneWt += ele?.Wt;\r\n//               colorStoneWts += ele?.Wt;\r\n//             }\r\n//             if (ele?.MasterManagement_DiamondStoneTypeid === 3) {\r\n//               miscWt += ele?.Wt;\r\n//               miscWts += ele?.Wt;\r\n//             }\r\n//           } else if (ele?.MasterManagement_DiamondStoneTypeid === 4) {\r\n//             if (ele?.IsPrimaryMetal === 1) {\r\n//               metalColorCode = ele?.MetalColorCode;\r\n//             } else if (metalColorCode === \"\") {\r\n//               metalColorCode = ele?.MetalColorCode;\r\n//             }\r\n//           }\r\n//         }\r\n//       });\r\n//       obj.TotalAmount =\r\n//         obj.TotalAmount / data?.BillPrint_Json[0].CurrencyExchRate;\r\n//       obj.diamondWts = diamondWts;\r\n//       obj.colorStoneWts = colorStoneWts;\r\n//       obj.miscWts = miscWts;\r\n//       obj.materials = materials;\r\n//       obj.metalColorCode = metalColorCode;\r\n//       obj.miscWt = miscWt;\r\n//       resultArr.push(obj);\r\n\r\n//     });\r\n//     metalArr.push({ label: \"Diamond Wt\", value: diamondWt, gm: false });\r\n//     metalArr.push({ label: \"Stone Wt\", value: colorStoneWt, gm: false });\r\n//     metalArr.push({ label: \"Gross Wt\", value: grossWts, gm: true });\r\n//     // metalArr.push({label: \"Misc Wt\", value: diamondWt, gm: false});\r\n//     if (!estimate) {\r\n//       // metalArr.push({ label: \"Gross Wt\", value: grossWt, gm: true });\r\n//     }\r\n\r\n//     setSummary(metalArr);\r\n//     let taxValue = taxGenrator(json0Datas, totalAmountBefore);\r\n//     let afterTotal =\r\n//       taxValue.reduce((accumulator, currentValue) => {\r\n//         return accumulator + (+currentValue.amount / json0Datas?.CurrencyExchRate);\r\n//       }, 0) + totalAmountBefore;\r\n//     let grandTotal = afterTotal + (json0Datas?.AddLess / json0Datas?.CurrencyExchRate) + (json0Datas?.FreightCharges / json0Datas?.CurrencyExchRate);\r\n//     let totalAmounts = {\r\n//       before: totalAmountBefore,\r\n//       after: afterTotal,\r\n//       grand: grandTotal,\r\n//     };\r\n//     settotalAmount(totalAmounts);\r\n//     settax(taxValue);\r\n\r\n//     console.log(resultArr);\r\n//     resultArr?.sort((a, b) => {\r\n//       const designNoA = a.designno;\r\n//       const designNoB = b.designno;\r\n\r\n//       // If both designnos are numbers, compare them numerically\r\n//       if (!isNaN(designNoA) && !isNaN(designNoB)) {\r\n//         return Number(designNoA) - Number(designNoB);\r\n//       }\r\n\r\n//       // If one of the designnos is a number, it should come before the alphanumeric one\r\n//       if (!isNaN(designNoA)) {\r\n//         return -1;\r\n//       }\r\n//       if (!isNaN(designNoB)) {\r\n//         return 1;\r\n//       }\r\n\r\n//       // Both designnos are alphanumeric, compare them as strings\r\n//       return designNoA.localeCompare(designNoB);\r\n//     });\r\n//     setData(resultArr);\r\n//     console.log(data);\r\n//   };\r\n\r\n\r\n//   useEffect(() => {\r\n//     const sendData = async () => {\r\n//       try {\r\n//         const data = await apiCall(token, invoiceNo, printName, urls, evn, ApiVer);\r\n//         if (data?.Status === \"200\") {\r\n//           let isEmpty = isObjectEmpty(data?.Data);\r\n//           if (!isEmpty) {\r\n//             loadData(data?.Data);\r\n//             setLoader(false);\r\n//           } else {\r\n//             setLoader(false);\r\n//             setMsg(\"Data Not Found\");\r\n//           }\r\n//         } else {\r\n//           setLoader(false);\r\n//           setMsg(data?.Message);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(error);\r\n//       }\r\n//     };\r\n//     sendData();\r\n//   }, []);\r\n//   return loader ? (\r\n//     <Loader />\r\n//   ) : msg === \"\" ? (\r\n//     <>\r\n//       <div className={`container max_width_container pad_60_allPrint ${style?.containerJewellery} jewelleryinvoiceContain`} >\r\n//         {/* buttons */}\r\n//         <div className={`d-flex justify-content-end align-items-center ${style?.print_sec_sum4} mb-4 mt-4 ${style?.font_14}`} >\r\n//           <div className=\"form-check ps-3\">\r\n//             <input\r\n//               type=\"button\"\r\n//               className=\"btn_white blue py-1\"\r\n//               value=\"Print\"\r\n//               onClick={(e) => handlePrint(e)}\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         {/* header */}\r\n//         {json0Data?.IsBranchWiseAddress === 1 ? (\r\n//           <div className={`d-flex justify-content-between p-2`}>\r\n//             <div>\r\n//               <div\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Branch_Address }}\r\n//               ></div>\r\n//             </div>\r\n//             <div>\r\n//               {isImageWorking && (json0Data?.PrintLogo !== \"\" &&\r\n//                 <img src={json0Data?.PrintLogo} alt=\"\"\r\n//                   className='w-25 h-auto ms-auto d-block object-fit-contain'\r\n//                   onError={handleImageErrors} height={120} width={150} />)}\r\n//               {/* <img\r\n//                 src={json0Data?.PrintLogo}\r\n//                 alt=\"\"\r\n//                 className={`${style?.image}`}\r\n//               /> */}\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <div className={`${style2.companyDetails}`}>\r\n//             <div className={`${style2.companyhead} p-2`}>\r\n//               <p className={style2.lines} style21={{ fontWeight: \"bold\" }}>\r\n//                 {json0Data?.CompanyFullName}\r\n//               </p>\r\n//               <p className={style2.lines}>{json0Data?.CompanyAddress}</p>\r\n//               <p className={style2.lines}>{json0Data?.CompanyAddress2}</p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.CompanyCity}-{json0Data?.CompanyPinCode},\r\n//                 {json0Data?.CompanyState}({json0Data?.CompanyCountry})\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 Tell No: {json0Data?.CompanyTellNo}\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.CompanyEmail} | {json0Data?.CompanyWebsite}\r\n//               </p>\r\n//               <p className={style2.lines}>\r\n//                 {json0Data?.Company_VAT_GST_No} | {json0Data?.Company_CST_STATE}\r\n//                 -{json0Data?.Company_CST_STATE_No} | PAN-{json0Data?.Pannumber}\r\n//               </p>\r\n//             </div>\r\n//             <div\r\n//               style={{ width: \"30%\" }}\r\n//               className=\"d-flex justify-content-end align-item-center h-100\"\r\n//             >\r\n//               <img\r\n//                 src={json0Data?.PrintLogo}\r\n//                 alt=\"\"\r\n//                 className={style2.headerImg}\r\n//               />\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//         {/* sub header */}\r\n//         <div className={`mt-2 no_break ${style?.word_Break} ${style?.font_13}`}>\r\n//           <div className=\"border d-flex justify-content-between\">\r\n//             <div className=\"col-6 p-2\" style={{ maxWidth: \"350px\", }}>\r\n//               <p className=\"lh-1 pb-1\">To, </p>\r\n//               {json0Data?.customerfirmname !== \"\" && (\r\n//                 <p className={`fw-bold lh-1 pb-1 ${style?.font_14}`}>\r\n//                   {json0Data?.customerfirmname}\r\n//                 </p>\r\n//               )}\r\n//               {json0Data?.customerstreet !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customerstreet}</p>\r\n//               )}\r\n//               {json0Data?.customerregion !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customerregion}</p>\r\n//               )}\r\n//               {json0Data?.customercity !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">{json0Data?.customercity}</p>\r\n//               )}\r\n//               <p className=\"lh-1 pb-1\">\r\n//                 {json0Data?.customerstate}, {json0Data?.customercountry}{\" \"}\r\n//                 {json0Data?.customerpincode}\r\n//               </p>\r\n//               {json0Data?.customermobileno !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">Tel : {json0Data?.customermobileno}</p>\r\n//               )}\r\n//               <p className=\"lh-1 pb-1\">{json0Data?.customeremail1}</p>\r\n//             </div>\r\n//             <div className=\"col-5 px-2 py-3\">\r\n//               <p className=\"lh-1 pb-1\">\r\n//                 {evns === \"memo\" && \"Memo \"} Invoice\r\n//                 <span className=\"fw-bold\">#: <span className=\"\">{json0Data?.InvoiceNo}</span></span> <span className=\"text-secondary\">Dated</span>{\" \"}\r\n//                 <span className=\"fw-bold\">{json0Data?.EntryDate}</span>\r\n//               </p>\r\n//               {customerDetail?.pan !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   PAN<span className=\"fw-bold\">#: {customerDetail?.pan}</span>{\" \"}\r\n//                 </p>\r\n//               )}\r\n//               {customerDetail?.gst !== \"\" && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   VAT <span className=\"fw-bold\">{customerDetail?.gst} </span>\r\n//                   {json0Data?.Cust_CST_STATE !== \"\" &&\r\n//                     json0Data?.Cust_CST_STATE_No !== \"\" && (\r\n//                       <>\r\n//                         | {json0Data?.Cust_CST_STATE}{\" \"}\r\n//                         <span className=\"fw-bold\">\r\n//                           {json0Data?.Cust_CST_STATE_No}\r\n//                         </span>\r\n//                       </>\r\n//                     )}{\" \"}\r\n//                 </p>\r\n//               )}\r\n//               <p className=\"lh-1 pb-1\">\r\n//                 Terms:{\" \"}\r\n//                 <span className=\"fw-bold\">{json0Data?.DueDays} Days</span>\r\n//               </p>\r\n//               {evns !== \"memo\" && (\r\n//                 <p className=\"lh-1 pb-1\">\r\n//                   Due Date:{\" \"}\r\n//                   <span className=\"fw-bold\">{json0Data?.DueDate}</span>\r\n//                 </p>\r\n//               )}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//         {/* table header */}\r\n//         <div className={`d-flex border lightGrey no_break ${style?.font_15}`}>\r\n//           <div className=\"col-1 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">SR NO</p>\r\n//           </div>\r\n//           <div className=\"col-2 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">ITEM CODE</p>\r\n//           </div>\r\n//           <div className=\"col-5 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">DESCRIPTION</p>\r\n//           </div>\r\n//           <div className=\"col-2 p-1 border-end\">\r\n//             <p className=\"fw-bold text-center\">IMAGE</p>\r\n//           </div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"fw-bold text-center\">\r\n//               AMOUNT ({json0Data?.CurrencyCode})\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* table data */}\r\n//         {data.length > 0 &&\r\n//           data.map((e, i) => {\r\n//             return (\r\n//               <div\r\n//                 className=\"d-flex border-start border-end border-bottom no_break\"\r\n//                 key={i}\r\n//               >\r\n//                 <div className={`col-1 p-1 border-end ${style?.font_14}`}>\r\n//                   <p className=\"text-center\">{i + 1}</p>\r\n//                 </div>\r\n//                 <div className={`col-2 p-1 border-end ${style?.font_14}`}>\r\n//                   <p className={`${style?.word_Break}`}>Job: {e?.SrJobno} </p>\r\n//                   <p className={`${style?.word_Break}`}>\r\n//                     Design: <span className=\"fw-bold\">{e?.designno}</span>{\" \"}\r\n//                   </p>\r\n//                   {e?.Size !== \"\" && <p className={`${style?.word_Break}`}>{e?.Size}</p>}\r\n//                   {e?.lineid !== \"\" && <p className={`pt-2 ${style?.word_Break}`}>{e?.lineid}</p>}\r\n//                 </div>\r\n//                 <div className={`col-5 p-1 border-end ${style?.word_Break}`}>\r\n//                   <p className={`${style?.word_Break}`}>\r\n//                     {e?.MetalTypePurity} {e?.metalColorCode} |{\" \"}\r\n//                     {NumberWithCommas(e?.grosswt, 3)} gms GW |{\" \"}\r\n//                     {NumberWithCommas(e?.NetWt, 3)} gms NW\r\n//                     {e?.diamondWts !== 0 && (\r\n//                       <span> | {memo && \"Dia: \"} {NumberWithCommas(e?.diamondWts, 3)} Cts</span>\r\n//                     )}\r\n//                     {e?.colorStoneWts !== 0 && (\r\n//                       <span> | {memo && \"CS: \"} {NumberWithCommas(e?.colorStoneWts, 3)} Cts</span>\r\n//                     )}\r\n//                     {e?.miscWts !== 0 && (\r\n//                       <span> | {memo && \"MISC: \"} {NumberWithCommas(e?.miscWts, 3)} gms</span>\r\n//                     )}\r\n//                   </p>\r\n\r\n//                   {e.materials.length > 0 &&\r\n//                     e.materials.map((ele, ind) => {\r\n//                       return (\r\n//                         <p key={ind} className={`${style?.word_Break}`}>\r\n//                           {ele?.IsCenterStone === 1 ? (\r\n//                             \"Center stone\"\r\n//                           ) : (\r\n//                             <>\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 1 &&\r\n//                                 \"Diamond\"}\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 2 &&\r\n//                                 \"Colorstone\"}\r\n//                               {ele?.MasterManagement_DiamondStoneTypeid === 3 &&\r\n//                                 \"Misc\"}\r\n//                             </>\r\n//                           )}\r\n//                           : {NumberWithCommas(ele?.Pcs, 0)} Pcs | {NumberWithCommas(ele?.Wt, 3)} {ele?.MasterManagement_DiamondStoneTypeid === 3 ? \"gms\" : \"Cts\"} | {ele?.ShapeName}{ele?.MasterManagement_DiamondStoneTypeid !== 3 && <> {\" \"} {ele?.Colorname} {ele?.QualityName}\r\n//                           </>}\r\n//                         </p>\r\n//                       );\r\n//                     })}\r\n\r\n//                   {e?.JobRemark !== \"\" && (\r\n//                     <div>\r\n//                       <p className=\"text-decoration-underline fw-bold\">\r\n//                         REMARKS{\" \"}\r\n//                       </p>\r\n//                       <p>{e?.JobRemark}</p>\r\n//                     </div>\r\n//                   )}\r\n//                 </div>\r\n//                 <div className=\"col-2 p-1 border-end d-flex justify-content-center align-items-center\">\r\n//                   <img\r\n//                     src={e?.DesignImage}\r\n//                     alt=\"\"\r\n//                     className={`d-block mx-auto ${style?.image} w-100`}\r\n//                     onError={handleImageError}\r\n//                   />\r\n//                 </div>\r\n//                 <div className={`col-2 p-1 ${style?.font_14}`}>\r\n//                   <p className=\"text-end\">\r\n//                     <span\r\n//                       dangerouslySetInnerHTML={{\r\n//                         __html: json0Data?.Currencysymbol,\r\n//                       }}\r\n//                     ></span>\r\n//                     {NumberWithCommas(e?.TotalAmount, 2)}{\" \"}\r\n//                   </p>\r\n//                 </div>\r\n//               </div>\r\n//             );\r\n//           })}\r\n//         {/* total */}\r\n//         <div className={`d-flex border-start border-end border-bottom no_break lightGrey ${style?.font_14}`}>\r\n//           <div className=\"col-1 p-1 border-end\">\r\n//             <p className=\"text-center\"></p>\r\n//           </div>\r\n//           <div className=\"col-9 p-1 border-end\">\r\n//             <p className=\"fw-bold\">TOTAL</p>{\" \"}\r\n//           </div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(totalAmount.before, 2)}{\" \"}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* Remakrs */}\r\n//         <div className=\"d-flex border-start border-end border-bottom no_break\">\r\n//           <div className=\"col-4 p-1 border-end\">\r\n//             <p className=\"fw-bold text-decoration-underline\"> REMARKS</p>\r\n//             <div dangerouslySetInnerHTML={{ __html: json0Data?.PrintRemark }} className=\"ps-2\" ></div>\r\n//           </div>\r\n//           <div className={`col-4 p-1 border-end ${style?.font_14}`}>\r\n//             {summary.map((e, i) => {\r\n//               return (\r\n//                 <div className=\"d-flex justify-content-between\" key={i}>\r\n//                   <p key={i}>{e?.label}: </p>\r\n//                   <p className={`${style?.word_Break}`}>\r\n//                     {NumberWithCommas(e?.value, 3)} {e?.gm ? \"gm\" : \"cts\"}\r\n//                   </p>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//           <div className={`col-2 p-1 border-end ${style?.font_14}`}>\r\n//             {tax.map((e, i) => {\r\n//               return (\r\n//                 <p key={i}>\r\n//                   {e?.name} @ {e?.per}\r\n//                 </p>\r\n//               );\r\n//             })}\r\n//             <p className={`${style?.font_14}`}>Total</p>\r\n//             {json0Data?.AddLess > 0 ? <p className={` ${style?.font_14}`}>Add</p> : <p>Less</p>}\r\n//             {json0Data?.FreightCharges !== 0 && <p className={` ${style?.font_14}`}>Delivery Charges\t</p>}\r\n//           </div>\r\n//           <div className={`col-2 p-1 ${style?.font_14}`}>\r\n//             {tax.map((e, i) => {\r\n//               return (\r\n//                 <p className=\"text-end fw-bold\" key={i}>\r\n//                   <span\r\n//                     dangerouslySetInnerHTML={{\r\n//                       __html: json0Data?.Currencysymbol,\r\n//                     }}\r\n//                   ></span>\r\n//                   {NumberWithCommas(+e?.amount / json0Data?.CurrencyExchRate, 2)}{\" \"}\r\n//                 </p>\r\n//               );\r\n//             })}\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(totalAmount.after, 2)}{\" \"}\r\n//             </p>\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(json0Data?.AddLess / json0Data?.CurrencyExchRate, 2)}{\" \"}\r\n//             </p>\r\n//             {json0Data?.FreightCharges !== 0 && <p className=\"text-end fw-bold\">  <span\r\n//               dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//             ></span>{NumberWithCommas(json0Data?.FreightCharges / json0Data?.CurrencyExchRate, 2)}\t</p>}\r\n//           </div>\r\n//         </div>\r\n//         {/* gran total */}\r\n//         <div className={`d-flex border-start border-end border-bottom no_break lightGrey ${style?.font_14}`}>\r\n//           <div className=\"col-8 p-1\"></div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"fw-bold\">GRAND TOTAL</p>{\" \"}\r\n//           </div>\r\n//           <div className=\"col-2 p-1\">\r\n//             <p className=\"text-end fw-bold\">\r\n//               <span\r\n//                 dangerouslySetInnerHTML={{ __html: json0Data?.Currencysymbol }}\r\n//               ></span>\r\n//               {NumberWithCommas(totalAmount.grand, 2)}{\" \"}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//         {/* computer generated */}\r\n//         <p className={`py-2 ${style.generated} no_break text-secondary px-1`}>\r\n//           ** THIS IS A COMPUTER GENERATED INVOICE AND KINDLY NOTIFY US\r\n//           IMMEDIATELY IN CASE YOU FIND ANY DISCREPANCY IN THE DETAILS OF\r\n//           TRANSACTIONS{\" \"}\r\n//         </p>\r\n//         {/* remark */}\r\n//         <div className=\"border px-2 no_break py-2\">\r\n//           <div dangerouslySetInnerHTML={{ __html: json0Data?.Declaration }} className={`${style?.declaration}`} ></div>\r\n//         </div>\r\n//         {/* bank detail */}\r\n//         <div className={`border-start border-end border-bottom d-flex no_break ${style?.font_13}`}>\r\n//           <div className=\"col-6 border-end p-2\">\r\n//             <p className=\"fw-bold\">Bank Detail</p>\r\n//             <p>Bank Name: {json0Data?.bankname}</p>\r\n//             <p>Branch: {json0Data?.bankaddress}</p>\r\n//             <p>Account Name: {json0Data?.accountname}</p>\r\n//             <p>Account No. : {json0Data?.accountnumber}</p>\r\n//             <p>RTGS/NEFT IFSC: {json0Data?.rtgs_neft_ifsc}</p>\r\n//           </div>\r\n//           <div className=\"col-3 border-end d-flex flex-column justify-content-between p-2\">\r\n//             <p>Signature</p>\r\n//             <p className=\"fw-bold\">{json0Data?.customerfirmname}</p>\r\n//           </div>\r\n//           <div className=\"col-3 d-flex flex-column justify-content-between p-2\">\r\n//             <p>Signature</p>\r\n//             <p className=\"fw-bold\">{json0Data?.CompanyFullName}</p>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   ) : (\r\n//     <p className=\"text-danger fs-2 fw-bold mt-5 text-center w-50 mx-auto\">\r\n//       {msg}\r\n//     </p>\r\n//   );\r\n// };\r\n\r\n// export default JewelleryTaxInvoice;\r\n\r\n\r\nconst JewelleryTaxInvoice = ({ urls, token, invoiceNo, printName, evn, ApiVer }) => {\r\n  \r\n  return (\r\n    <>\r\n          { atob(evn)?.trim()?.toLowerCase() === 'sale' && <JewelleryTaxInvoiceSale urls={urls} token={token} invoiceNo={invoiceNo} printName={printName} evn={evn} ApiVer={ApiVer}  /> }      \r\n          { atob(evn)?.trim()?.toLowerCase() === 'quote' && <JewelleryTaxInvoiceQuote urls={urls} token={token} invoiceNo={invoiceNo} printName={printName} evn={evn} ApiVer={ApiVer} /> }      \r\n          { atob(evn)?.trim()?.toLowerCase() === 'memo' && <JewelleryTaxInvoiceMemo urls={urls} token={token} invoiceNo={invoiceNo} printName={printName} evn={evn} ApiVer={ApiVer} /> }      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default JewelleryTaxInvoice"],"names":["_ref","_atob","_atob$trim","_atob2","_atob2$trim","_atob3","_atob3$trim","urls","token","invoiceNo","printName","evn","ApiVer","_jsxs","_Fragment","children","atob","trim","toLowerCase","_jsx","JewelleryTaxInvoiceSale","JewelleryTaxInvoiceQuote","JewelleryTaxInvoiceMemo"],"sourceRoot":""}